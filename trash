int	add_enviroment_variable(t_all *command, t_env *env)
{
	int	i;
	int j;
	int q;
	int fl;
	// char *key;
	// char *key_two;
	t_env *new;

	q = 0;
	fl = 0;
	while (command->arg[++q])
	{
		i = -1;
		j = validation(command, q);
		if (j > 0)
		{
			fl = var_with_equal(env, command->arg[q], j, fl);
			// key = ft_substr(command->arg[q], 0, j);
			// key_two = ft_substr(command->arg[q], 0, j - 1);
			// if (!key || !key_two)
			// 	return (ft_error_int("Error of malloc.", ENOMEM));	
			// while (env->str)
			// {
			// 	if (ft_strnstr(env->str, key, j))
			// 	{
			// 		free(env->str);
			// 		env->str = NULL;
			// 		env->str = ft_strdup(command->arg[q]);
			// 		if (!env->str)
			// 			return (ft_error_int("Error of malloc.", ENOMEM));	
			// 		fl = 1;
			// 		break ;
			// 	}
			// 	else if (ft_strnstr(env->str, key_two, j - 1) && env->str[ft_strlen(key_two)] == '\0')
			// 	{
			// 		free(env->str);
			// 		env->str = NULL;
			// 		env->str = ft_strdup(command->arg[q]);
			// 		if (!env->str)
			// 			return (ft_error_int("Error of malloc.", ENOMEM));	
			// 		fl = 1;
			// 		break ;
			// 	}
			// 	if (env->next == NULL)
			// 		break ;
			// 	env = env->next;
			// }
			// free(key);
			// free(key_two);
			// key = NULL;
			// key_two = NULL;
		}
		else if (j == 0)
		{
			var_without_equal(env, command->arg[q])
			// while (env->str)
			// {
			// 	if (ft_strnstr(env->str, command->arg[q], ft_strlen(command->arg[q])) && env->str[ft_strlen(command->arg[q])] == '\0')
			// 	{
			// 		fl = 1;
			// 		break ;
			// 	}
			// 	if (env->next == NULL)
			// 		break ;
			// 	env = env->next;
			// }
		}
		else if (j < 0)
		{
			write(1, "ya_bash: export: '", 18);
			write(1, command->arg[q], ft_strlen(command->arg[q]));
			ft_error_int("': not a valid identifier", 1, 0);
			break ;
		}
		if (fl == 0)
		{
			new = malloc(sizeof(t_env *));
			if (!new)
				return (ft_error_int("Error of malloc.", ENOMEM, 1));
			env->next = new;
			new->str = ft_strdup(command->arg[q]);
			if (!new->str)
				return (ft_error_int("Error of malloc.", ENOMEM, 1));	
			new->next = NULL;
		}
		fl = 0;
	}
	return (0);